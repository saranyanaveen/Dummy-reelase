name: Create Release Notes

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  release:
    if: github.event.pull_request.merged == true # Run only for merged PRs
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Get PR Details
        id: pr_details
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_BODY="${{ github.event.pull_request.body }}"

          # Capture the labels assigned to the PR
          PR_LABELS=$(echo '${{ toJson(github.event.pull_request.labels) }}' | jq -r '.[].name' | paste -sd ',' -) # Combine labels into a comma-separated string

          echo "PR_TITLE=$PR_TITLE" >> $GITHUB_ENV

          # Handle multi-line PR_BODY properly by writing it to a separate file and using `<<EOF` for environment variables
          echo "PR_BODY<<EOF" >> $GITHUB_ENV
          echo "$PR_BODY" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          echo "PR_LABELS=$PR_LABELS" >> $GITHUB_ENV

      - name: Debug Output
        run: |
          echo "Pull Request Title: $PR_TITLE"
          echo "Pull Request Body:"
          echo "$PR_BODY"
          echo "Labels: $PR_LABELS"

      - name: Get Latest Tag
        id: get_latest_tag
        run: |
          LATEST_TAG=$(git tag --sort=-v:refname | head -n 1 || echo "v0.0.0")
          VERSION=${LATEST_TAG#v}
          echo "Latest tag: $LATEST_TAG"
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
          echo "MAJOR=$MAJOR" >> $GITHUB_ENV
          echo "MINOR=$MINOR" >> $GITHUB_ENV
          echo "PATCH=$PATCH" >> $GITHUB_ENV

      - name: Increment Version
        id: increment_version
        run: |
          if [[ "$PR_LABELS" == *"major"* ]]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [[ "$PR_LABELS" == *"minor"* ]]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          elif [[ "$PR_LABELS" == *"patch"* ]]; then
            PATCH=$((PATCH + 1))
          fi
          NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
          echo "New version: $NEW_VERSION"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Generate Release Notes
        run: |
          echo -e "## Release v${NEW_VERSION}\n" > release_notes.md
          echo -e "### Feature:\n" >> release_notes.md
          echo "$PR_BODY" | awk '/### Feature:/{flag=1;next}/###/{flag=0}flag' >> release_notes.md
          echo -e "\n### Bug Fixes:\n" >> release_notes.md
          echo "$PR_BODY" | awk '/### Bug Fixes:/{flag=1;next}/###/{flag=0}flag' >> release_notes.md

      - name: Create GitHub Release
        run: |
          gh release create "$NEW_VERSION" release_notes.md \
            --title "Release $NEW_VERSION" \
            --notes-file release_notes.md
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
